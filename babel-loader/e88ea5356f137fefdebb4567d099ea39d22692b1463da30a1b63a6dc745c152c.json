{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Mock from \"mockjs\";\n\n// get请求从config.url获取参数，post从config.body中获取参数\nfunction param2Obj(url) {\n  const search = url.split(\"?\")[1];\n  if (!search) {\n    return {};\n  }\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\n}\nlet List = [];\nconst count = 200;\nfor (let i = 0; i < count; i++) {\n  List.push(Mock.mock({\n    id: Mock.Random.guid(),\n    name: Mock.Random.cname(),\n    addr: Mock.mock(\"@county(true)\"),\n    \"age|18-60\": 1,\n    birth: Mock.Random.date(),\n    sex: Mock.Random.integer(0, 1)\n  }));\n}\nexport default {\n  /**\r\n   * 获取列表\r\n   * 要带参数 name, page, limt; name可以不填, page,limit有默认值。\r\n   * @param name, page, limit\r\n   * @return {{code: number, count: number, data: *[]}}\r\n   */\n  getUserList: config => {\n    const {\n      name,\n      page = 1,\n      limit = 20\n    } = param2Obj(config.url);\n    /*  console.log(\"name:\" + name, \"page:\" + page, \"分页大小limit:\" + limit); */\n    const mockList = List.filter(user => {\n      if (name && user.name.indexOf(name) === -1 && user.addr.indexOf(name) === -1) return false;\n      return true;\n    });\n    const pageList = mockList.filter((item, index) => index < limit * page && index >= limit * (page - 1));\n    return {\n      code: 20000,\n      count: mockList.length,\n      list: pageList\n    };\n  },\n  /**\r\n   * 增加用户\r\n   * @param name, addr, age, birth, sex\r\n   * @return {{code: number, data: {message: string}}}\r\n   */\n  createUser: config => {\n    const {\n      name,\n      addr,\n      age,\n      birth,\n      sex\n    } = JSON.parse(config.body);\n    console.log(JSON.parse(config.body));\n    List.unshift({\n      id: Mock.Random.guid(),\n      name: name,\n      addr: addr,\n      age: age,\n      birth: birth,\n      sex: sex\n    });\n    return {\n      code: 20000,\n      data: {\n        message: \"添加成功\"\n      }\n    };\n  },\n  /**\r\n   * 删除用户\r\n   * @param id\r\n   * @return {*}\r\n   */\n  deleteUser: config => {\n    const {\n      id\n    } = JSON.parse(config.body);\n    if (!id) {\n      return {\n        code: -999,\n        message: \"参数不正确\"\n      };\n    } else {\n      List = List.filter(u => u.id !== id);\n      return {\n        code: 20000,\n        message: \"删除成功\"\n      };\n    }\n  },\n  /**\r\n   * 批量删除\r\n   * @param config\r\n   * @return {{code: number, data: {message: string}}}\r\n   */\n  batchremove: config => {\n    let {\n      ids\n    } = param2Obj(config.url);\n    ids = ids.split(\",\");\n    List = List.filter(u => !ids.includes(u.id));\n    return {\n      code: 20000,\n      data: {\n        message: \"批量删除成功\"\n      }\n    };\n  },\n  /**\r\n   * 修改用户\r\n   * @param id, name, addr, age, birth, sex\r\n   * @return {{code: number, data: {message: string}}}\r\n   */\n  updateUser: config => {\n    const {\n      id,\n      name,\n      addr,\n      age,\n      birth,\n      sex\n    } = JSON.parse(config.body);\n    const sex_num = parseInt(sex);\n    List.some(u => {\n      if (u.id === id) {\n        u.name = name;\n        u.addr = addr;\n        u.age = age;\n        u.birth = birth;\n        u.sex = sex_num;\n        return true;\n      }\n    });\n    return {\n      code: 20000,\n      data: {\n        message: \"编辑成功\"\n      }\n    };\n  }\n};","map":{"version":3,"names":["Mock","param2Obj","url","search","split","JSON","parse","decodeURIComponent","replace","List","count","i","push","mock","id","Random","guid","name","cname","addr","birth","date","sex","integer","getUserList","config","page","limit","mockList","filter","user","indexOf","pageList","item","index","code","length","list","createUser","age","body","console","log","unshift","data","message","deleteUser","u","batchremove","ids","includes","updateUser","sex_num","parseInt","some"],"sources":["C:/Users/Lriucnxi/Desktop/my-app/src/api/mockServeData/user.js"],"sourcesContent":["import Mock from \"mockjs\";\r\n\r\n// get请求从config.url获取参数，post从config.body中获取参数\r\nfunction param2Obj(url) {\r\n  const search = url.split(\"?\")[1];\r\n  if (!search) {\r\n    return {};\r\n  }\r\n  return JSON.parse(\r\n    '{\"' +\r\n      decodeURIComponent(search)\r\n        .replace(/\"/g, '\\\\\"')\r\n        .replace(/&/g, '\",\"')\r\n        .replace(/=/g, '\":\"') +\r\n      '\"}'\r\n  );\r\n}\r\n\r\nlet List = [];\r\nconst count = 200;\r\n\r\nfor (let i = 0; i < count; i++) {\r\n  List.push(\r\n    Mock.mock({\r\n      id: Mock.Random.guid(),\r\n      name: Mock.Random.cname(),\r\n      addr: Mock.mock(\"@county(true)\"),\r\n      \"age|18-60\": 1,\r\n      birth: Mock.Random.date(),\r\n      sex: Mock.Random.integer(0, 1),\r\n    })\r\n  );\r\n}\r\n\r\nexport default {\r\n  /**\r\n   * 获取列表\r\n   * 要带参数 name, page, limt; name可以不填, page,limit有默认值。\r\n   * @param name, page, limit\r\n   * @return {{code: number, count: number, data: *[]}}\r\n   */\r\n  getUserList: (config) => {\r\n    const { name, page = 1, limit = 20 } = param2Obj(config.url);\r\n    /*  console.log(\"name:\" + name, \"page:\" + page, \"分页大小limit:\" + limit); */\r\n    const mockList = List.filter((user) => {\r\n      if (\r\n        name &&\r\n        user.name.indexOf(name) === -1 &&\r\n        user.addr.indexOf(name) === -1\r\n      )\r\n        return false;\r\n      return true;\r\n    });\r\n    const pageList = mockList.filter(\r\n      (item, index) => index < limit * page && index >= limit * (page - 1)\r\n    );\r\n    return {\r\n      code: 20000,\r\n      count: mockList.length,\r\n      list: pageList,\r\n    };\r\n  },\r\n  /**\r\n   * 增加用户\r\n   * @param name, addr, age, birth, sex\r\n   * @return {{code: number, data: {message: string}}}\r\n   */\r\n  createUser: (config) => {\r\n    const { name, addr, age, birth, sex } = JSON.parse(config.body);\r\n    console.log(JSON.parse(config.body));\r\n    List.unshift({\r\n      id: Mock.Random.guid(),\r\n      name: name,\r\n      addr: addr,\r\n      age: age,\r\n      birth: birth,\r\n      sex: sex,\r\n    });\r\n    return {\r\n      code: 20000,\r\n      data: {\r\n        message: \"添加成功\",\r\n      },\r\n    };\r\n  },\r\n  /**\r\n   * 删除用户\r\n   * @param id\r\n   * @return {*}\r\n   */\r\n  deleteUser: (config) => {\r\n    const { id } = JSON.parse(config.body);\r\n    if (!id) {\r\n      return {\r\n        code: -999,\r\n        message: \"参数不正确\",\r\n      };\r\n    } else {\r\n      List = List.filter((u) => u.id !== id);\r\n      return {\r\n        code: 20000,\r\n        message: \"删除成功\",\r\n      };\r\n    }\r\n  },\r\n  /**\r\n   * 批量删除\r\n   * @param config\r\n   * @return {{code: number, data: {message: string}}}\r\n   */\r\n  batchremove: (config) => {\r\n    let { ids } = param2Obj(config.url);\r\n    ids = ids.split(\",\");\r\n    List = List.filter((u) => !ids.includes(u.id));\r\n    return {\r\n      code: 20000,\r\n      data: {\r\n        message: \"批量删除成功\",\r\n      },\r\n    };\r\n  },\r\n  /**\r\n   * 修改用户\r\n   * @param id, name, addr, age, birth, sex\r\n   * @return {{code: number, data: {message: string}}}\r\n   */\r\n  updateUser: (config) => {\r\n    const { id, name, addr, age, birth, sex } = JSON.parse(config.body);\r\n    const sex_num = parseInt(sex);\r\n    List.some((u) => {\r\n      if (u.id === id) {\r\n        u.name = name;\r\n        u.addr = addr;\r\n        u.age = age;\r\n        u.birth = birth;\r\n        u.sex = sex_num;\r\n        return true;\r\n      }\r\n    });\r\n    return {\r\n      code: 20000,\r\n      data: {\r\n        message: \"编辑成功\",\r\n      },\r\n    };\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}